# QuantumFit AI - Full-Stack Fitness Application Prompt

## Project Overview
Create a modern, AI-powered fitness application called "QuantumFit AI" that helps users track their fitness journey, manage workouts, monitor nutrition, and maintain healthy habits.

## Tech Stack
- **Frontend**: Next.js 14 with App Router
- **Backend**: Next.js API Routes
- **Database**: MongoDB with Mongoose
- **Authentication**: JWT-based auth
- **UI Components**: shadcn/ui
- **Styling**: Tailwind CSS
- **Icons**: Lucide Icons
- **State Management**: React Hooks
- **Form Handling**: React Hook Form
- **Notifications**: Sonner for toasts
- **Email**: Nodemailer
- **Charts**: Recharts

## Core Features

### 1. Authentication System
- User registration with email verification
- Login with JWT tokens
- Password reset functionality
- Protected routes
- User profile management

### 2. Dashboard
- Overview cards showing daily stats
- Progress charts
- Quick action buttons
- Tabbed interface for different sections
  - Overview
  - Nutrition
  - Workouts
  - Progress

### 3. Water Intake Tracking
- Daily water intake goals
- Visual progress indicator
- Add/update intake amounts
- Email reminders for goal completion
- Historical data tracking

### 4. Workout Management
- Pre-defined workout plans
- Custom workout creation
- Exercise library with descriptions
- Workout scheduling
- Progress tracking
- Rest timer
- Form guidance

### 5. Nutrition Tracking
- Daily calorie tracking
- Macro nutrient breakdown
- Meal planning
- Food database integration
- Custom meal creation
- Nutrition goals

### 6. Progress Tracking
- Weight tracking
- Body measurements
- Progress photos
- Goal setting
- Achievement system
- Historical data visualization

### 7. AI Features
- Personalized workout recommendations
- Diet suggestions based on goals
- Form correction feedback
- Progress analysis
- Adaptive workout plans

## Database Schema

### User Model
```typescript
{
  name: string
  email: string
  password: string (hashed)
  waterIntakeGoal: number
  waterIntakeLog: [{
    date: Date
    amount: number
  }]
  calorieGoal: number
  macros: {
    protein: number
    carbs: number
    fats: number
  }
  measurements: [{
    date: Date
    weight: number
    bodyFat?: number
    measurements: {
      chest: number
      waist: number
      // etc
    }
  }]
  workoutPlans: [ref: WorkoutPlan]
  mealPlans: [ref: MealPlan]
  createdAt: Date
  updatedAt: Date
}
```

### Workout Models
```typescript
WorkoutPlan {
  name: string
  description: string
  duration: number
  difficulty: string
  exercises: [{
    exercise: ref: Exercise
    sets: number
    reps: number
    weight?: number
    duration?: number
  }]
  schedule: [string] // days of week
  user: ref: User
}

Exercise {
  name: string
  description: string
  muscleGroups: [string]
  equipment: [string]
  difficulty: string
  instructions: [string]
  videoUrl?: string
  imageUrl?: string
}
```

### Nutrition Models
```typescript
MealPlan {
  name: string
  description: string
  meals: [{
    name: string
    time: string
    foods: [{
      food: ref: Food
      quantity: number
      unit: string
    }]
  }]
  totalCalories: number
  macros: {
    protein: number
    carbs: number
    fats: number
  }
  user: ref: User
}

Food {
  name: string
  calories: number
  serving: {
    size: number
    unit: string
  }
  macros: {
    protein: number
    carbs: number
    fats: number
  }
  category: string
}
```

## UI/UX Requirements

### Design System
- Modern, clean interface
- Responsive design for all devices
- Dark/light mode support
- Consistent color scheme
- Accessible components
- Loading states
- Error handling
- Success/error notifications

### Layout
- Sidebar navigation
- Top header with profile
- Main content area
- Mobile-responsive menu
- Quick action buttons
- Progress indicators

## Implementation Steps

1. **Project Setup**
   - Initialize Next.js project
   - Set up Tailwind CSS
   - Install dependencies
   - Configure MongoDB
   - Set up environment variables

2. **Authentication**
   - Create user model
   - Implement registration
   - Implement login
   - Set up JWT
   - Create protected routes
   - Add middleware

3. **Dashboard**
   - Create layout
   - Implement sidebar
   - Add overview cards
   - Create charts
   - Add quick actions

4. **Water Intake**
   - Create tracking component
   - Implement API routes
   - Add progress visualization
   - Set up email reminders
   - Add goal management

5. **Workout System**
   - Create exercise database
   - Implement workout planner
   - Add progress tracking
   - Create exercise library
   - Implement timer

6. **Nutrition System**
   - Create food database
   - Implement meal planner
   - Add calorie tracking
   - Create macro calculator
   - Add food search

7. **Progress Tracking**
   - Implement measurement tracking
   - Add progress photos
   - Create visualization charts
   - Add goal tracking
   - Implement achievements

8. **AI Integration**
   - Set up OpenAI API
   - Implement workout recommendations
   - Add diet suggestions
   - Create progress analysis
   - Add form feedback

## Additional Considerations

### Security
- Input validation
- XSS protection
- CSRF protection
- Rate limiting
- Secure headers
- Data encryption

### Performance
- Image optimization
- Code splitting
- Lazy loading
- Caching strategies
- API optimization

### Testing
- Unit tests
- Integration tests
- E2E tests
- Performance testing
- Security testing

### Deployment
- CI/CD pipeline
- Environment configuration
- Monitoring setup
- Backup strategy
- Error logging

## Future Enhancements
- Social features
- Community challenges
- Virtual trainer
- Mobile app
- Wearable integration
- Video workouts
- Nutrition AI
- Progress sharing

## Documentation Requirements
- API documentation
- User guide
- Developer guide
- Deployment guide
- Contributing guide